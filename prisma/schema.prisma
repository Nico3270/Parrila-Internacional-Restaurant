generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Section {
  id   String @id @default(uuid())
  name String @unique
  products Product[]
}

model Type {
  id   String @id @default(uuid())
  name String @unique
  products Product[]
}

enum Role {
  admin
  user
  server
  kitchen
  delivery
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  emailVerified DateTime?
  password String
  role Role @default(user)
  image String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}


model Product {
  id              String @id @default(uuid())
  titulo          String
  description     String
  shortDescription String?
  available       Boolean
  precio          Float @default(0)
  discountPrice   Float? @default(0)

  // Relación con Section
  section         Section @relation(fields: [sectionId], references: [id])
  sectionId       String

  // Relación con Type
  type            Type @relation(fields: [typeId], references: [id])
  typeId          String
  
  slug            String @unique
  tags            String[] @default([])
  priority        Int?
  featured        Boolean?
  isAvailableDuring Json?

  // Relación inversa con ProductImage (renombrado a plural)
  productImages   ProductImage[]

  // Relación inversa con Review
  reviews         Review[]

  // Relación inversa con CustomizationOptions
  customizationOptions CustomizationOptions?

  relatedProductsForward Product[] @relation("RelatedProducts")
  relatedProductsBackward Product[] @relation("RelatedProducts")

  // Índices
  @@index([sectionId])
  @@index([typeId])

  // Índice compuesto opcional para mejorar búsquedas
  @@index([sectionId, typeId])

  // Campos de fecha
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model ProductImage {
  id        Int    @id @default(autoincrement())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  username  String
  comment   String
  rating    Int
  date      DateTime @default(now())
  productId String
  product   Product @relation(fields: [productId], references: [id])
}

model Extra {
  id    String @id @default(uuid())
  name  String @unique
  price Float
  options CustomizationOptionsExtras[]
}

model CustomizationOptions {
  id        String @id @default(uuid())
  productId String @unique
  product   Product @relation(fields: [productId], references: [id])
  extras    CustomizationOptionsExtras[]
  choices   Choice[]
}

model CustomizationOptionsExtras {
  customizationOptionsId String
  extraId                String

  customizationOptions CustomizationOptions @relation(fields: [customizationOptionsId], references: [id], onDelete: Cascade)
  extra                Extra @relation(fields: [extraId], references: [id], onDelete: Cascade)

  @@id([customizationOptionsId, extraId]) // Llave primaria compuesta
}

model Choice {
  id          String   @id @default(uuid())
  name        String
  values      String[]
  optionsId   String
  options     CustomizationOptions @relation(fields: [optionsId], references: [id])
}
